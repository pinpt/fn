#!/usr/bin/env node

const program = require('commander'),
    pkg = require('../package.json'),
    chalk = require('chalk'),
    path = require('path'),
    ejs = require('ejs'),
    fs = require('fs');

function error(msg, ...args) {
    console.error.apply(console, [chalk.red(msg)].concat(args));
    process.exit(1);
}

function info(msg, ...args) {
    console.log.apply(console, [chalk.green(msg)].concat(args));
}

function tmpl(input, obj, output) {
    if (!fs.existsSync(input)) {
        error('missing template named %s', input);
    }
    const buf = ejs.render(fs.readFileSync(input).toString(), obj);
    fs.writeFileSync(output, buf);
}

const skipTemplate = (fn) => /\.(png|jpg|jpeg|gif|svg)$/.test(fn);

function tmpldir(templates, config, dir, re = /.*/) {
    fs.existsSync(dir) || fs.mkdirSync(dir);
    for (let d of fs.readdirSync(templates)) {
        const tdir = path.join(templates, d);
        if (fs.statSync(tdir).isDirectory()) {
            fs.mkdirSync(path.join(dir, d));
            tmpldir(tdir, config, path.join(dir, d), re);
        } else {
            if (re.test(d)) {
                if (skipTemplate(d)) {
                    fs.copyFileSync(tdir, path.join(dir, d));
                } else {
                    tmpl(tdir, config, path.join(dir, d));
                }
            }
        }
    }
}

function copydir(from, to) {
    fs.existsSync(to) || fs.mkdirSync(to);
    for (let d of fs.readdirSync(from)) {
        const tdir = path.join(from, d);
        if (fs.statSync(tdir).isDirectory()) {
            fs.mkdirSync(path.join(from, d));
            copydir(tdir, path.join(to, d));
        } else {
            fs.copyFileSync(tdir, path.join(to, d));
        }
    }
}

const helpers = {
    error,
    info,
    tmpl,
    tmpldir,
    copydir
};

const tmplDir = path.join(__dirname, './templates');

program
    .version(pkg.version)
    .description(pkg.description);

program
    .command('init <name>')
    .description('initialize a new Fn api project')
    .option('-d --dir <dir>', 'directory to place the project, defaults to cwd')
    .option('-f --force', 'force creation of the directory even if it exists already')
    .option('--desc <desc>', 'the project description')
    .option('--certs <certs>', 'TLS certificate directory to copy from')
    .action((name, cmd) => {
        if (cmd.certs && !fs.existsSync(cmd.certs)) {
            error('no certificate directory found at %s', path.resolve(cmd.certs));
        }
        require('./init')(name, {
            dir: path.join(cmd.dir || process.cwd(), name),
            force: !!cmd.force,
            templates: path.join(tmplDir, 'init'),
            description: cmd.desc,
            certs: cmd.certs ? path.resolve(cmd.certs) : undefined,
        }, helpers, pkg);
    });

program
    .command('api <name>')
    .description('initialize a new Fn api project')
    .option('-d --dir <dir>', 'project directory')
    .option('-f --force', 'force creation of the directory even if it exists already')
    .option('--desc <desc>', 'the project description')
    .action((name, cmd) => {
        const projectdir = path.resolve(cmd.dir || process.cwd(), 'apis');
        if (!fs.existsSync(projectdir)) {
            error('no APIs found in %s', projectdir);
        }
        require('./api')(name, {
            dir: path.join(projectdir, name),
            force: !!cmd.force,
            templates: path.join(tmplDir, 'api'),
            description: cmd.desc
        }, helpers, pkg);
    });

program.parse(process.argv);

if (!process.argv.slice(2).length) {
    program.outputHelp();
}
